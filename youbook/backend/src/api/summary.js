var express = require('express');
var router = express.Router();
var db = require('../db.js');
const { OpenAI } = require('openai');
var bodyParser = require('body-parser');
const { v4: uuidv4 } = require('uuid');
require('dotenv').config();



///////얘 API가 빈 값을 내놓음 왤까

// Initialize OpenAI client
const client = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY // Your OpenAI API key from .env
});

// Fine-tuned model ID
const fineTunedModelId = 'ft:gpt-4o-mini-2024-07-18:personal:summary:A8lnw3tq';

// Function to summarize content using OpenAI
async function getModelResponse(user_input) {
    console.log("Sending user input to OpenAI for summarization: ", user_input); // 디버깅 출력: 사용자 입력 확인

    try {
        const response = await client.chat.completions.create({
            model: fineTunedModelId,
            messages: [
                { role: "user", content: user_input}
            ]
        });
        console.log("Received response from OpenAI: ", response); // 디버깅 출력: OpenAI 응답 확인
        return response.choices[0].message.content.trim();
    } catch (error) {
        console.error("Error with OpenAI request: ", error);
        throw error;
    }
}

// The API endpoint to handle chatbot summary
router.post('/chatbot/summary', function (request, response) {
    console.log('55라우터 진입 시 세션 상태:', request.session);
    var user_id = request.session.nickname;
    var book_id = request.body.bookId; // Assuming it's in the request body
    var input_count = request.body.inputCount; // Also assuming it's in the request body

    console.log("Starting chatbot summary for book_id: ", book_id, " and input_count: ", input_count); // 디버깅 출력: 시작 메시지

    db.getConnection(function (err, connection) {
        if (err) throw err;
        connection.beginTransaction(async function (err) {
            if (err) {
                connection.release();
                throw err;
            }

            // Query to get questions and responses ordered by quest_num
            connection.query(
                'SELECT question, response, quest_num FROM chatbot_data WHERE book_id = ? AND user_id = ? AND input_count = ? ORDER BY quest_num',
                [book_id, user_id, input_count],
                async function (error, results) {
                    if (error) {
                        return connection.rollback(function () {
                            connection.release();
                            throw error;
                        });
                    }

                    console.log("Fetched questions and responses from database: ", results); // 디버깅 출력: DB 결과 확인

                    // Combine all questions and responses for summarization
                    let combinedContent = results.map(item => `${item.question}: ${item.response}`).join('\n');
                    console.log("Combined content for OpenAI summarization: ", combinedContent); // 디버깅 출력: 결합된 콘텐츠 확인

                    try {
                        // Send to OpenAI for summarization
                        let summary = await getModelResponse(combinedContent);

                        console.log("Summary generated by OpenAI: ", summary); // 디버깅 출력: OpenAI가 생성한 요약 확인

                        // Insert summary into chatbot_summary table
                        connection.query(
                            'INSERT INTO chatbot_summary (user_id, book_id, input_count, content) VALUES (?, ?, ?, ?)',
                            [user_id, book_id, input_count, summary],
                            function (error, insertResult) {
                                if (error) {
                                    return connection.rollback(function () {
                                        connection.release();
                                        throw error;
                                    });
                                }

                                console.log("Summary successfully saved to the database."); // 디버깅 출력: 요약이 데이터베이스에 저장됨

                                connection.commit(function (err) {
                                    if (err) {
                                        return connection.rollback(function () {
                                            connection.release();
                                            throw err;
                                        });
                                    }

                                    connection.release();

                                    // 요약된 summary와 함께 성공 응답 반환
                                    response.status(200).json({
                                        status: 200,
                                        message: 'Summary successfully saved!',
                                        content: summary// 요약된 내용도 클라이언트로 반환
                                    });
                                });
                            }
                        );
                    } catch (openAIError) {
                        console.error("OpenAI summarization error: ", openAIError); // 디버깅 출력: OpenAI 에러 확인
                        return connection.rollback(function () {
                            connection.release();
                            response.status(500).json({ status: 500, message: 'Error with OpenAI summarization' });
                        });
                    }
                }
            );
        });
    });
});

module.exports = router;
